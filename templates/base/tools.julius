function BufferLoader(audioContext, urlList, callback) {
  this.audioContext = audioContext;
  this.urlList = urlList;
  this.onload = callback;
  this.bufferList = new Array();
  this.loadCount = 0;
}

BufferLoader.prototype.loadBuffer = function(url, index) {
  // Load buffer asynchronously
  var request = new XMLHttpRequest();
  request.open("GET", url, true);
  request.responseType = "arraybuffer";

  var loader = this;

  request.onload = function() {
    // Asynchronously decode the audio file data in request.response
    loader.audioContext.decodeAudioData(
      request.response,
      function(buffer) {
        if (!buffer) {
          alert('error decoding file data: ' + url);
          return;
        }
        loader.bufferList[index] = buffer;
        if (++loader.loadCount == loader.urlList.length)
          loader.onload(loader.bufferList);
      },
      function(error) {
        console.error('decodeAudioData error', error);
      }
    );
  }

  request.onerror = function() {
    alert('BufferLoader: XHR error');
  }

  request.send();
}

BufferLoader.prototype.load = function() {
  for (var i = 0; i < this.urlList.length; ++i)
  this.loadBuffer(this.urlList[i], i);
}

function BufferTool(audioContext, files) {
    var tool = this;

    loader = new BufferLoader(
        audioContext,
        files,
        function (buffers) {
            tool.buffers = buffers;

            alert("Loaded buffers");
        }
    );

    loader.load();
}

BufferTool.prototype.getBuffer = function (index) {
    return this.buffers[index];
}

function SourceTool(audioContext, buffer, loop) {
    this.source = audioContext.createBufferSource();

    this.source.buffer = buffer;
    this.source.loop = loop;
}

function GainTool(audioContext, source, value) {
    this.node = audioContext.createGain();

    source.connect(this.node);

    this.node.gain.value = value;
}

GainTool.prototype.setValue = function (value) {
    this.node.gain.value = value;
}

function CrossfadeTool(sourceOne, sourceTwo, value, max) {
    this.controlOne = GainTool(sourceOne, 1);
    this.controlTwo = GainTool(sourceTwo, 0);

    this.sourceOne.connect(this.controlOne);
    this.sourceTwo.connect(this.controlTwo);

    var v = value / max;
    var gainOne = Math.cos((1 - v) * 0.5 * Math.PI);
    var gainTwo = Math.cos(v * 0.5 * Math.PI);

    this.controlOne.setValue(this.gainOne);
    this.controlTwo.setValue(this.gainTwo);
}

CrossfadeTool.prototype.crossfade = function (value, max) {
    var v = value / max;
    var gainOne = Math.cos((1 - v) * 0.5 * Math.PI);
    var gainTwo = Math.cos(v * 0.5 * Math.PI);

    this.controlOne.setValue(this.gainOne);
    this.controlTwo.setValue(this.gainTwo);
}

function FilterTool(audioContext, source, type, frequency) {
    this.node = audioContext.createBiquadFilter();

    this.node.type = type;
    this.node.frequency.value = frequency;

    source.connect(this.node);
}

FilterTool.prototype.filter = function (type, frequency) {
    this.node.type = type;
    this.node.frequency.value = frequency;
}

FilterTool.prototype.setType = function (type) {
    this.node.type = type;
}

FilterTool.prototype.setFrequency = function (frequency) {
    this.node.frequency.value = frequency;
}

