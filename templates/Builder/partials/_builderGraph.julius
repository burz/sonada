var width = 960,
    height = 600;

var cluster = d3.layout.cluster()
    .size([height, width - 160]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [(width - d.y), d.x]; });

var svg = d3.select("#builderGraphContainer").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(-40,0)");

d3.json("#{synthaxBuilderUrl}", function(error, root) {
    cluster.children = function(d) {
        if(d.type === "gain" ||
           d.type === "filter") {
            return [d.child];
        }
        else if(d.type === "crossfade") {
            return [d.rightChild, d.LeftChild];
        }
        else if(d.type === "let") {
            return [d.expr];
        }
        else {
            return [];
        }
    };

    var rootIndex = root.synthax.length - 1;
    var nodes = cluster.nodes(root.synthax[rootIndex]);
    var links = cluster.links(nodes);

    var link = svg.selectAll(".link")
        .data(links)
      .enter().append("path")
        .attr("class", "link")
        .attr("d", diagonal);

    var node = svg.selectAll(".node")
        .data(nodes)
      .enter().append("g")
        .attr("class", "node")
        .attr("size", "3000")
        .attr("transform", function(d) {
          return "translate(" + (width - d.y) + "," + d.x + ")";
        })

    node.append("circle")
        .attr("r", 4.5);

    node.append("text")
        .attr("dx", function(d) { return d.children ? 8 : -8; })
        .attr("dy", 3)
        .style("text-anchor", function(d) { return d.children ? "start" : "end"; })
        .text(function(d) {
            return d.type; });
});
